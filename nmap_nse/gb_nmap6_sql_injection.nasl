###############################################################################
# OpenVAS Vulnerability Test
# $Id: gb_nmap6_sql_injection.nasl 12127 2018-10-26 13:14:31Z cfischer $
#
# Autogenerated NSE wrapper
#
# Authors:
# NSE-Script: Eddie Bell
# NASL-Wrapper: autogenerated
#
# Copyright:
# NSE-Script: The Nmap Security Scanner (http://nmap.org)
# Copyright (C) 2013 Greenbone Networks GmbH, http://www.greenbone.net
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License version 2
# (or any later version), as published by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
###############################################################################

if(description)
{
  script_oid("1.3.6.1.4.1.25623.1.0.803541");
  script_version("$Revision: 12127 $");
  script_tag(name:"cvss_base", value:"7.5");
  script_tag(name:"cvss_base_vector", value:"AV:N/AC:L/Au:N/C:P/I:P/A:P");
  script_tag(name:"last_modification", value:"$Date: 2018-10-26 15:14:31 +0200 (Fri, 26 Oct 2018) $");
  script_tag(name:"creation_date", value:"2013-02-28 19:00:30 +0530 (Thu, 28 Feb 2013)");
  script_name("Nmap NSE 6.01: sql-injection");
  script_category(ACT_ATTACK);
  script_tag(name:"qod_type", value:"remote_analysis");
  script_copyright("NSE-Script: The Nmap Security Scanner; NASL-Wrapper: Greenbone Networks GmbH");
  script_family("Nmap NSE");
  script_dependencies("nmap_nse.nasl", "find_service.nasl");
  script_require_ports("Services/www", 80);
  script_exclude_keys("Settings/disable_cgi_scanning");
  script_mandatory_keys("Tools/Launch/nmap_nse", "Tools/Present/nmap6.01");

  script_add_preference(name:"httpspider.withinhost", value:"", type:"entry");
  script_add_preference(name:"httpspider.maxpagecount", value:"", type:"entry");
  script_add_preference(name:"httpspider.withindomain", value:"", type:"entry");
  script_add_preference(name:"httpspider.maxdepth", value:"", type:"entry");
  script_add_preference(name:"httpspider.url", value:"", type:"entry");
  script_add_preference(name:"sql-injection.start", value:"", type:"entry");
  script_add_preference(name:"http.pipeline", value:"", type:"entry");
  script_add_preference(name:"http.useragent", value:"", type:"entry");
  script_add_preference(name:"sql-injection.maxdepth", value:"", type:"entry");
  script_add_preference(name:"http-max-cache-size", value:"", type:"entry");
  script_add_preference(name:"httpspider.noblacklist", value:"", type:"entry");

  script_tag(name:"summary", value:"Spiders an HTTP server looking for URLs containing queries vulnerable to an SQL injection attack.

The script spiders an HTTP server looking for URLs containing queries. It then proceeds to combine
crafted SQL commands with susceptible URLs in order to obtain errors. The errors are analysed to see
if the URL is vulnerable to attack. This uses the most basic form of SQL injection but anything more
complicated is better suited to a standalone tool.

We may not have access to the target web server's true hostname, which can prevent access to
virtually hosted sites.

SYNTAX:

httpspider.withinhost:  only spider URLs within the same host.
(default: true)

httpspider.maxpagecount:  the maximum amount of pages to visit.
A negative value disables the limit (default: 20)

httpspider.withindomain:  only spider URLs within the same
domain. This widens the scope from 'withinhost' and can
not be used in combination. (default: false)

httpspider.maxdepth:  the maximum amount of directories beneath
the initial url to spider. A negative value disables the limit.
(default: 3)

httpspider.url:  the url to start spidering. This is a URL
relative to the scanned host eg. /default.html (default: /)

sql-injection.start:  The path at which to start spidering, default '/'.

http.pipeline:  If set, it represents the number of HTTP requests that'll be
pipelined (ie, sent in a single request). This can be set low to make
debugging easier, or it can be set high to test how a server reacts (its
chosen max is ignored).

TODO
Implement cache system for http pipelines

http.useragent:  The value of the User-Agent header field sent with
requests. By default it is
''Mozilla/5.0 (compatible; Nmap Scripting Engine; http://nmap.org/book/nse.html)''.
A value of the empty string disables sending the User-Agent header field.

sql-injection.maxdepth:  The maximum depth to spider, default 10.

http-max-cache-size:  The maximum memory size (in bytes) of the cache.

httpspider.noblacklist:  if set, doesn't load the default blacklist");

  script_tag(name:"solution_type", value:"Mitigation");

  exit(0);
}

# The corresponding NSE script doesn't belong to the 'safe' category
if (safe_checks()) exit(0);

include ("http_func.inc");

i = 0;

port = get_http_port(default:80);

pref = script_get_preference("httpspider.withinhost");
if (!isnull(pref) && pref != "") {
  args[i++] = string('"', 'httpspider.withinhost', '=', pref, '"');
}
pref = script_get_preference("httpspider.maxpagecount");
if (!isnull(pref) && pref != "") {
  args[i++] = string('"', 'httpspider.maxpagecount', '=', pref, '"');
}
pref = script_get_preference("httpspider.withindomain");
if (!isnull(pref) && pref != "") {
  args[i++] = string('"', 'httpspider.withindomain', '=', pref, '"');
}
pref = script_get_preference("httpspider.maxdepth");
if (!isnull(pref) && pref != "") {
  args[i++] = string('"', 'httpspider.maxdepth', '=', pref, '"');
}
pref = script_get_preference("httpspider.url");
if (!isnull(pref) && pref != "") {
  args[i++] = string('"', 'httpspider.url', '=', pref, '"');
}
pref = script_get_preference("sql-injection.start");
if (!isnull(pref) && pref != "") {
  args[i++] = string('"', 'sql-injection.start', '=', pref, '"');
}
pref = script_get_preference("http.pipeline");
if (!isnull(pref) && pref != "") {
  args[i++] = string('"', 'http.pipeline', '=', pref, '"');
}
pref = script_get_preference("http.useragent");
if (!isnull(pref) && pref != "") {
  args[i++] = string('"', 'http.useragent', '=', pref, '"');
}
pref = script_get_preference("sql-injection.maxdepth");
if (!isnull(pref) && pref != "") {
  args[i++] = string('"', 'sql-injection.maxdepth', '=', pref, '"');
}
pref = script_get_preference("http-max-cache-size");
if (!isnull(pref) && pref != "") {
  args[i++] = string('"', 'http-max-cache-size', '=', pref, '"');
}
pref = script_get_preference("httpspider.noblacklist");
if (!isnull(pref) && pref != "") {
  args[i++] = string('"', 'httpspider.noblacklist', '=', pref, '"');
}

argv = make_list("nmap", "--script=sql-injection.nse","-p",port, get_host_ip());

if(i > 0) {
  scriptArgs = "--script-args=";
  foreach arg(args) {
    scriptArgs += arg + ",";
  }
  argv = make_list(argv, scriptArgs);
}

if(TARGET_IS_IPV6())
  argv = make_list(argv, "-6");

timing_policy = get_kb_item("Tools/nmap/timing_policy");
if(timing_policy =~ '^-T[0-5]$')
  argv = make_list(argv, timing_policy);

source_iface = get_preference("source_iface");
if(source_iface =~ '^[0-9a-zA-Z:_]+$') {
  argv = make_list(argv, "-e");
  argv = make_list(argv, source_iface);
}

res = pread(cmd:"nmap", argv:argv);

if(res)
{
  foreach line (split(res))
  {
    if(ereg(pattern:"^\|",string:line)) {
      result +=  substr(chomp(line),2) + '\n';
    }

    error = eregmatch(string:line, pattern:"^nmap: (.*)$");
    if (error) {
      msg = string('Nmap command failed with following error message:\n', line);
      log_message(data : msg, port:port);
    }
  }

  if("sql-injection" >< result) {
    msg = string('Result found by Nmap Security Scanner (sql-injection.nse) ',
                'http://nmap.org:\n\n', result);
    security_message(data : msg, port:port);
  }
}
else
{
  msg = string('Nmap command failed entirely:\n', 'nmap ', argv);
  log_message(data: msg, port:port);
}
