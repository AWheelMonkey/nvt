###############################################################################
# OpenVAS Vulnerability Test
# $Id: gb_hp_printers_inf_disc.nasl 8893 2018-02-21 06:36:27Z cfischer $
#
# HP Printers Information Disclosure Vulnerability
#
# Authors:
# Jan Philipp Schulte <jan.schulte@greenbone.net>
#
# Copyright:
# Copyright (C) 2018 Greenbone Networks GmbH, https://www.greenbone.net
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
###############################################################################

if( description )
{
  script_oid("1.3.6.1.4.1.25623.1.0.113092");
  script_version("$Revision: 8893 $");
  script_tag(name:"last_modification", value:"$Date: 2018-02-21 07:36:27 +0100 (Wed, 21 Feb 2018) $");
  script_tag(name:"creation_date", value:"2018-01-25 11:40:04 +0100 (Thu, 25 Jan 2018)");
  script_tag(name:"cvss_base", value:"2.1");
  script_tag(name:"cvss_base_vector", value:"AV:L/AC:L/Au:N/C:P/I:N/A:N");

  script_tag(name:"qod_type", value:"remote_banner");

  script_tag(name:"solution_type", value:"VendorFix");

  script_cve_id("CVE-2017-2747");

  script_name("HP Printers Information Disclosure Vulnerability");

  script_category(ACT_GATHER_INFO);

  script_copyright("Copyright (C) 2018 Greenbone Networks GmbH");
  script_family("Web application abuses");
  script_dependencies("gb_hp_printer_detect.nasl");
  script_mandatory_keys("hp_printer/installed");

  script_tag(name:"summary", value:"Multiple HP Printers may expose the credentials of the SMTP server configured to receive and process emails generated by the printers.");
  script_tag(name:"vuldetect", value:"The script checks if the target host is a vulnerable device running a vulnerable firmware version.");
  script_tag(name:"affected", value:"Following Models and Firmware Versions are affected:

  DesignJet T790, T795, T1300, T2300                              Firmware through IG_11_00_00.09

  DesignJet T920, T930, T1500, T1530, T2500, T2530                Firmware through MRY_04_05_00.4

  DesignJet T3500                                                 Firmware through AENEAS_03_04_00.8

  Latex 310, 330, 360, 370                                        Firmware through NEXUS_01_12_00.10

  Latex 315, 335, 365, 375                                        Firmware through NEXUS_03_12_00.14

  Latex 560, 570                                                  Firmware through STORM_00_05_01.5

  Latex 110                                                       Firmware through NEXUS_00_04_53.8");

  script_tag(name:"solution", value:"Update to a fixed version according to the printer model:

  DesignJet T790, T795, T1300, T2300                              Fixed version: IG_11_00_00.10

  DesignJet T920, T930, T1500, T1530, T2500, T2530                Fixed version: MRY_04_05_00.5

  DesignJet T3500                                                 Fixed version: AENEAS_03_04_00.9

  Latex 310, 330, 360, 370                                        Fixed version: NEXUS_01_12_00.11

  Latex 315, 335, 365, 375                                        Fixed version: NEXUS_03_12_00.15

  Latex 560, 570                                                  Fixed version: STORM_00_05_01.6

  Latex 110                                                       Update will be made available end of August 2018");

  script_xref(name:"URL", value:"https://support.hp.com/us-en/document/c05624457");

  exit( 0 );
}

include( "host_details.inc" );
include( "version_func.inc" );

if( ! model = get_kb_item( "hp_model" ) ) exit( 0 );
if( ! fw_ver = get_kb_item( "hp_fw_ver" ) ) exit( 0 );

IG = make_list( "designjet t790", "designjet t795", "designjet t1300", "designjet t2300" );
MRY = make_list( "designjet t920", "designjet t930", "designjet t1500", "designjet t1530", "designjet t2500", "designjet t2530" );
AENEAS = make_list( "designjet t3500" );
NEXUS_00 = make_list( "latex 110" );
NEXUS_01 = make_list( "latex 310", "latex 330", "latex 360", "latex 370" );
NEXUS_03 = make_list( "latex 315", "latex 335", "latex 365", "latex 375" );
STORM = make_list( "latex 560", "latex 570" );

foreach test_model( IG ) {
  if( test_model == tolower( model ) ) {
    version = ereg_replace( pattern: "IG_", string: fw_ver, replace: "" );
    version = ereg_replace( pattern: "_", string: version, replace: "." );
    if( version_is_less_equal( version: version, test_version: "11.00.00.9" ) ) {
      report = report_fixed_ver( installed_version: fw_ver, fixed_version: "IG_11_00_00.10" );
      security_message( data: report, port: 0 );
      exit( 0 );
    }
    exit( 99 );
  }
}

foreach test_model( MRY ) {
  if( test_model == tolower( model ) ) {
    version = ereg_replace( pattern: "MRY_", string: fw_ver, replace: "" );
    version = ereg_replace( pattern: "_", string: version, replace: "." );
    if( version_is_less_equal( version: version, test_version: "04.05.00.4" ) ) {
      report = report_fixed_ver( installed_version: fw_ver, fixed_version: "MRY_04_05_00.5" );
      security_message( data: report, port: 0 );
      exit( 0 );
    }
    exit( 99 );
  }
}

foreach test_model( AENEAS ) {
  if( test_model == tolower( model ) ) {
    version = ereg_replace( pattern: "AENEAS_", string: fw_ver, replace: "" );
    version = ereg_replace( pattern: "_", string: version, replace: "." );
    if( version_is_less_equal( version: version, test_version: "03.04.00.8" ) ) {
      report = report_fixed_ver( installed_version: fw_ver, fixed_version: "AENEAS_03_04_00.9" );
      security_message( data: report, port: 0 );
      exit( 0 );
    }
    exit( 99 );
  }
}

foreach test_model( NEXUS_00 ) {
  if( test_model == tolower( model ) ) {
    version = ereg_replace( pattern: "NEXUS_", string: fw_ver, replace: "" );
    version = ereg_replace( pattern: "_", string: version, replace: "." );
    if( version_is_less_equal( version: version, test_version: "00.04.53.8" ) ) {
      report = report_fixed_ver( installed_version: fw_ver, fixed_version: "NoneAvailable" );
      security_message( data: report, port: 0);
      exit( 0 );
    }
    exit( 99 );
  }
}

foreach test_model( NEXUS_01 ) {
  if( test_model == tolower( model ) ) {
    version = ereg_replace( pattern: "NEXUS_", string: fw_ver, replace: "" );
    version = ereg_replace( pattern: "_", string: version, replace: "." );
    if( version_is_less_equal( version: version, test_version: "01.12.00.10" ) ) {
      report = report_fixed_ver( installed_version: fw_ver, fixed_version: "NEXUS_01_12_00.11" );
      security_message( data: report, port: 0 );
      exit( 0 );
    }
    exit( 99 );
  }
}

foreach test_model( NEXUS_03 ) {
  if( test_model == tolower( model ) ) {
    version = ereg_replace( pattern: "NEXUS_", string: fw_ver, replace: "" );
    version = ereg_replace( pattern: "_", string: version, replace: "." );
    if( version_is_less_equal( version: version, test_version: "03.12.00.14" ) ) {
      report = report_fixed_ver( installed_version: fw_ver, fixed_version: "NEXUS_03_12_00.14" );
      security_message( data: report, port: 0 );
      exit( 0 );
    }
    exit( 99 );
  }
}

foreach test_model( STORM ) {
  if( test_model == tolower( model ) ) {
    version = ereg_replace( pattern: "STORM_", string: fw_ver, replace: "" );
    version = ereg_replace( pattern: "_", string: version, replace: "." );
    if( version_is_less_equal( version: version, test_version: "00.05.01.5" ) ) {
      report = report_fixed_ver( installed_version: fw_ver, fixed_version: "STORM_00_05_01.6" );
      security_message( data: report, port: 0 );
      exit( 0 );
    }
    exit( 99 );
  }
}

exit( 0 );
